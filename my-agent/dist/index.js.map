{"version":3,"sources":["../src/index.ts","../src/character.ts","../src/__tests__/e2e/project.test.ts","../node_modules/uuid/dist/esm/stringify.js","../node_modules/uuid/dist/esm/rng.js","../node_modules/uuid/dist/esm/native.js","../node_modules/uuid/dist/esm/v4.js","../src/__tests__/e2e/starter-plugin.test.ts","../src/__tests__/e2e/natural-language.test.ts","../src/__tests__/e2e/index.ts"],"sourcesContent":["import { logger, type IAgentRuntime, type Project, type ProjectAgent } from '@elizaos/core';\nimport starterPlugin from './plugin.ts';\nimport { character } from './character.ts';\n\nconst initCharacter = ({ runtime }: { runtime: IAgentRuntime }) => {\n  logger.info('Initializing character');\n  logger.info('Name: ', character.name);\n};\n\nexport const projectAgent: ProjectAgent = {\n  character,\n  init: async (runtime: IAgentRuntime) => await initCharacter({ runtime }),\n  // plugins: [starterPlugin], <-- Import custom plugins here\n};\nconst project: Project = {\n  agents: [projectAgent],\n};\n\n// Export test suites for the test runner\nexport { testSuites } from './__tests__/e2e';\nexport { character } from './character.ts';\n\nexport default project;\n","import { type Character } from '@elizaos/core';\n\n/**\n * Represents the default character (Eliza) with her specific attributes and behaviors.\n * Eliza responds to a wide range of messages, is helpful and conversational.\n * She interacts with users in a concise, direct, and helpful manner, using humor and empathy effectively.\n * Eliza's responses are geared towards providing assistance on various topics while maintaining a friendly demeanor.\n */\nexport const character: Character = {\n  name: 'Eliza',\n  plugins: [\n    '@elizaos/plugin-sql',\n    ...(process.env.ANTHROPIC_API_KEY ? ['@elizaos/plugin-anthropic'] : []),\n    ...(process.env.OPENROUTER_API_KEY ? ['@elizaos/plugin-openrouter'] : []),\n    ...(process.env.OLLAMA_API_ENDPOINT ? ['@elizaos/plugin-ollama'] : []),\n    ...(process.env.GOOGLE_GENERATIVE_AI_API_KEY ? ['@elizaos/plugin-google-genai'] : []),\n    ...(process.env.OPENAI_API_KEY ? ['@elizaos/plugin-openai'] : []),\n    ...(!process.env.ANTHROPIC_API_KEY &&\n    !process.env.OPENROUTER_API_KEY &&\n    !process.env.GOOGLE_GENERATIVE_AI_API_KEY &&\n    !process.env.OLLAMA_API_ENDPOINT &&\n    !process.env.OPENAI_API_KEY\n      ? ['@elizaos/plugin-local-ai']\n      : []),\n    ...(process.env.DISCORD_API_TOKEN ? ['@elizaos/plugin-discord'] : []),\n    ...(process.env.TWITTER_API_KEY &&\n    process.env.TWITTER_API_SECRET_KEY &&\n    process.env.TWITTER_ACCESS_TOKEN &&\n    process.env.TWITTER_ACCESS_TOKEN_SECRET\n      ? ['@elizaos/plugin-twitter']\n      : []),\n    ...(process.env.TELEGRAM_BOT_TOKEN ? ['@elizaos/plugin-telegram'] : []),\n    ...(!process.env.IGNORE_BOOTSTRAP ? ['@elizaos/plugin-bootstrap'] : []),\n  ],\n  settings: {\n    secrets: {},\n  },\n  system:\n    'Respond to all messages in a helpful, conversational manner. Provide assistance on a wide range of topics, using knowledge when needed. Be concise but thorough, friendly but professional. Use humor when appropriate and be empathetic to user needs. Provide valuable information and insights when questions are asked.',\n  bio: [\n    'Engages with all types of questions and conversations',\n    'Provides helpful, concise responses',\n    'Uses knowledge resources effectively when needed',\n    'Balances brevity with completeness',\n    'Uses humor and empathy appropriately',\n    'Adapts tone to match the conversation context',\n    'Offers assistance proactively',\n    'Communicates clearly and directly',\n  ],\n  topics: [\n    'general knowledge and information',\n    'problem solving and troubleshooting',\n    'technology and software',\n    'community building and management',\n    'business and productivity',\n    'creativity and innovation',\n    'personal development',\n    'communication and collaboration',\n    'education and learning',\n    'entertainment and media',\n  ],\n  messageExamples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'This user keeps derailing technical discussions with personal problems.',\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: 'DM them. Sounds like they need to talk about something else.',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I tried, they just keep bringing drama back to the main channel.',\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: \"Send them my way. I've got time today.\",\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"I can't handle being a mod anymore. It's affecting my mental health.\",\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: 'Drop the channels. You come first.',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"But who's going to handle everything?\",\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: \"We will. Take the break. Come back when you're ready.\",\n        },\n      },\n    ],\n  ],\n  style: {\n    all: [\n      'Keep responses concise but informative',\n      'Use clear and direct language',\n      'Be engaging and conversational',\n      'Use humor when appropriate',\n      'Be empathetic and understanding',\n      'Provide helpful information',\n      'Be encouraging and positive',\n      'Adapt tone to the conversation',\n      'Use knowledge resources when needed',\n      'Respond to all types of questions',\n    ],\n    chat: [\n      'Be conversational and natural',\n      'Engage with the topic at hand',\n      'Be helpful and informative',\n      'Show personality and warmth',\n    ],\n  },\n};\n","import { type TestSuite } from '@elizaos/core';\n\n/**\n * Project E2E Test Suite\n *\n * This file demonstrates how to write end-to-end (E2E) tests for ElizaOS projects.\n * E2E tests are run using the `elizaos test` command, which provides a REAL runtime\n * environment with actual database, services, and plugin initialization.\n *\n * Key differences from unit tests:\n * - E2E tests receive a fully initialized IAgentRuntime instance\n * - The runtime has a real database (in-memory PGLite for testing)\n * - All plugins and services are actually initialized and running\n * - You can test real agent interactions and behaviors\n *\n * HOW TO ADD NEW E2E TESTS:\n * 1. Add a new test object to the `tests` array below\n * 2. Each test should have a descriptive `name` and async `fn` function\n * 3. The test function receives a real runtime instance as its parameter\n * 4. Use the runtime to simulate real agent interactions\n * 5. Throw an error if the test fails (assertions that fail should throw)\n *\n * IMPORTANT: These tests run in a real environment, so:\n * - Don't use mocks or stubs - everything is real\n * - Tests may be slower than unit tests due to real operations\n * - Each test should be independent and not rely on previous test state\n */\nexport class ProjectTestSuite implements TestSuite {\n  name = 'project';\n  description = 'E2E tests for project-specific features';\n\n  tests = [\n    {\n      name: 'Project runtime environment test',\n      fn: async (runtime: any) => {\n        /**\n         * This test verifies that the project's runtime environment is set up correctly.\n         * It's a basic smoke test to ensure the character and core systems are loaded.\n         */\n        try {\n          // Verify character is loaded\n          if (!runtime.character) {\n            throw new Error('Character not loaded in runtime');\n          }\n\n          // Verify expected character properties\n          const character = runtime.character;\n          if (!character.name) {\n            throw new Error('Character name is missing');\n          }\n\n          // Verify the character has the expected name\n          if (character.name !== 'Eliza') {\n            throw new Error(`Expected character name 'Eliza', got '${character.name}'`);\n          }\n\n          // Verify character has required configuration\n          if (!character.system) {\n            throw new Error('Character system prompt is missing');\n          }\n\n          if (!Array.isArray(character.bio)) {\n            throw new Error('Character bio should be an array');\n          }\n\n          if (!Array.isArray(character.messageExamples)) {\n            throw new Error('Character message examples should be an array');\n          }\n\n          // Verify plugins are loaded (if specified in character)\n          if (character.plugins && !Array.isArray(character.plugins)) {\n            throw new Error('Character plugins should be an array');\n          }\n\n          // Test passed - no need to return anything\n          // The test framework considers it successful if no error is thrown\n        } catch (error) {\n          // Re-throw with more context for debugging\n          throw new Error(`Project runtime environment test failed: ${(error as Error).message}`);\n        }\n      },\n    },\n\n    /**\n     * Example: How to add a new test that checks if services are initialized\n     * Uncomment and modify this template for your own tests\n     */\n    /*\n    {\n      name: 'Services initialization test',\n      fn: async (runtime: any) => {\n        // Example: Check if a specific service is available\n        const myService = runtime.getService('my-service-name');\n        if (!myService) {\n          throw new Error('Expected service not found');\n        }\n        \n        // Example: Test service functionality\n        const result = await myService.doSomething();\n        if (!result) {\n          throw new Error('Service did not return expected result');\n        }\n      },\n    },\n    */\n\n    /**\n     * Example: How to test agent message processing\n     * This shows how to simulate a conversation with the agent\n     */\n    /*\n    {\n      name: 'Agent conversation test',\n      fn: async (runtime: any) => {\n        // Create a test room/conversation\n        const roomId = `test-room-${Date.now()}`;\n        \n        // Simulate sending a message to the agent\n        const userMessage = {\n          userId: 'test-user',\n          roomId: roomId,\n          content: { text: 'Hello agent!' },\n          // Add other required message properties\n        };\n        \n        // Process the message through the runtime\n        await runtime.processMessage(userMessage);\n        \n        // Retrieve messages from the conversation\n        const messages = await runtime.messageManager.getMessages({ roomId });\n        \n        // Verify the agent responded\n        if (messages.length < 2) {\n          throw new Error('Agent did not respond to message');\n        }\n        \n        // Check the agent's response\n        const agentResponse = messages.find(m => m.userId === runtime.agentId);\n        if (!agentResponse) {\n          throw new Error('Could not find agent response');\n        }\n        \n        // Verify response content\n        if (!agentResponse.content.text.toLowerCase().includes('hello')) {\n          throw new Error('Agent response did not contain expected greeting');\n        }\n      },\n    },\n    */\n  ];\n}\n\n// Export a default instance of the test suite for the E2E test runner\n// The test runner will automatically discover and run this suite\nexport default new ProjectTestSuite();\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n","import { randomUUID } from 'crypto';\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import { v4 as uuidv4 } from 'uuid';\n\n/**\n * Starter Plugin E2E Test Suite\n *\n * This comprehensive test suite demonstrates how to write end-to-end tests for ElizaOS plugins.\n * These tests run in a REAL runtime environment provided by `elizaos test`, meaning:\n *\n * - All services are actually initialized and running\n * - The database is real (in-memory PGLite for testing)\n * - Actions, providers, and events are fully functional\n * - The agent's AI/LLM capabilities are active\n *\n * STRUCTURE OF AN E2E TEST:\n * 1. Each test receives a live IAgentRuntime instance\n * 2. You interact with the runtime as if it were production\n * 3. Test success = no errors thrown, test failure = throw an error\n *\n * HOW TO ADD NEW TESTS:\n * 1. Add a new object to the `tests` array with:\n *    - `name`: A descriptive name for your test\n *    - `fn`: An async function that receives the runtime\n * 2. In your test function:\n *    - Set up any required state (rooms, messages, etc.)\n *    - Execute the functionality you want to test\n *    - Assert the results (throw errors on failure)\n * 3. Keep tests independent - don't rely on other tests' state\n *\n * TESTING PATTERNS DEMONSTRATED:\n * - Character configuration validation\n * - Plugin initialization\n * - Action execution (both direct and natural language)\n * - Provider functionality\n * - Service lifecycle management\n * - Natural language understanding\n */\n\n// Define a minimal TestSuite interface that matches what's needed\ninterface TestSuite {\n  name: string;\n  description: string;\n  tests: Array<{\n    name: string;\n    fn: (runtime: any) => Promise<any>;\n  }>;\n}\n\n// Define minimal interfaces for the types we need\ntype UUID = `${string}-${string}-${string}-${string}-${string}`;\n\ninterface Memory {\n  entityId: UUID;\n  roomId: UUID;\n  content: {\n    text: string;\n    source: string;\n    actions?: string[];\n  };\n}\n\ninterface State {\n  values: Record<string, any>;\n  data: Record<string, any>;\n  text: string;\n}\n\ninterface Content {\n  text: string;\n  source?: string;\n  actions?: string[];\n}\n\nexport class StarterTestSuite implements TestSuite {\n  name = 'starter';\n  description = 'E2E tests for the starter project demonstrating comprehensive testing patterns';\n\n  tests = [\n    {\n      /**\n       * Test 1: Character Configuration Validation\n       * This test ensures that the character is properly configured with all required fields.\n       * It's a good first test because it validates the basic setup before testing functionality.\n       */\n      name: 'Character configuration test',\n      fn: async (runtime: any) => {\n        const character = runtime.character;\n        const requiredFields = ['name', 'bio', 'plugins', 'system', 'messageExamples'];\n        const missingFields = requiredFields.filter((field) => !(field in character));\n\n        if (missingFields.length > 0) {\n          throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n        }\n\n        // Additional character property validations\n        if (character.name !== 'Eliza') {\n          throw new Error(`Expected character name to be 'Eliza', got '${character.name}'`);\n        }\n        if (!Array.isArray(character.plugins)) {\n          throw new Error('Character plugins should be an array');\n        }\n        if (!character.system) {\n          throw new Error('Character system prompt is required');\n        }\n        if (!Array.isArray(character.bio)) {\n          throw new Error('Character bio should be an array');\n        }\n        if (!Array.isArray(character.messageExamples)) {\n          throw new Error('Character message examples should be an array');\n        }\n      },\n    },\n\n    {\n      /**\n       * Test 2: Plugin Initialization\n       * This test verifies that plugins can be registered with the runtime.\n       * It's important to test this separately from action execution to isolate issues.\n       */\n      name: 'Plugin initialization test',\n      fn: async (runtime: any) => {\n        // Test plugin initialization with empty config\n        try {\n          await runtime.registerPlugin({\n            name: 'starter',\n            description: 'A starter plugin for Eliza',\n            init: async () => {},\n            config: {},\n          });\n        } catch (error) {\n          throw new Error(`Failed to register plugin: ${(error as Error).message}`);\n        }\n      },\n    },\n\n    {\n      /**\n       * Test 3: Direct Action Execution\n       * This test explicitly requests the HELLO_WORLD action to verify it works correctly.\n       * This is useful for testing that the action itself is functioning before testing\n       * natural language understanding.\n       */\n      name: 'Hello world action test - Direct execution',\n      fn: async (runtime: any) => {\n        const message: Memory = {\n          entityId: uuidv4() as UUID,\n          roomId: uuidv4() as UUID,\n          content: {\n            text: 'Can you say hello?',\n            source: 'test',\n            actions: ['HELLO_WORLD'], // Explicitly request the HELLO_WORLD action\n          },\n        };\n\n        const state: State = {\n          values: {},\n          data: {},\n          text: '',\n        };\n        let responseReceived = false;\n\n        // Test the hello world action\n        try {\n          await runtime.processActions(message, [], state, async (content: Content) => {\n            if (content.text === 'hello world!' && content.actions?.includes('HELLO_WORLD')) {\n              responseReceived = true;\n            }\n            return [];\n          });\n\n          if (!responseReceived) {\n            // Try directly executing the action if processActions didn't work\n            const helloWorldAction = runtime.actions.find((a: any) => a.name === 'HELLO_WORLD');\n            if (helloWorldAction) {\n              await helloWorldAction.handler(\n                runtime,\n                message,\n                state,\n                {},\n                async (content: Content) => {\n                  if (content.text === 'hello world!' && content.actions?.includes('HELLO_WORLD')) {\n                    responseReceived = true;\n                  }\n                  return [];\n                },\n                []\n              );\n            } else {\n              throw new Error('HELLO_WORLD action not found in runtime.actions');\n            }\n          }\n\n          if (!responseReceived) {\n            throw new Error('Hello world action did not produce expected response');\n          }\n        } catch (error) {\n          throw new Error(`Hello world action test failed: ${(error as Error).message}`);\n        }\n      },\n    },\n\n    {\n      /**\n       * Test 4: Natural Language Understanding - Hello World\n       * This is the KEY TEST that demonstrates how the agent should naturally understand\n       * a request to say \"hello world\" without explicitly specifying the action.\n       *\n       * This test simulates a real conversation where:\n       * 1. The user asks the agent to say \"hello world\" in natural language\n       * 2. The agent understands the request and decides to use the HELLO_WORLD action\n       * 3. The agent responds with \"hello world!\"\n       *\n       * This tests the full AI pipeline: understanding → decision making → action execution\n       */\n      name: 'Natural language hello world test',\n      fn: async (runtime: any) => {\n        // Create a unique room for this conversation\n        const roomId = uuidv4() as UUID;\n        const userId = uuidv4() as UUID;\n\n        try {\n          // Step 1: Send a natural language message asking for hello world\n          // Note: We do NOT specify any actions - the agent must understand and decide\n          const userMessage: Memory = {\n            entityId: userId,\n            roomId: roomId,\n            content: {\n              text: 'Please say hello world', // Natural language request\n              source: 'test',\n              // No actions specified - agent must understand the intent\n            },\n          };\n\n          // Step 2: Process the message through the agent's full pipeline\n          // This includes:\n          // - Natural language understanding\n          // - Intent recognition\n          // - Action selection\n          // - Response generation\n          let agentResponse: string | null = null;\n          let actionUsed: string | null = null;\n\n          // Set up a callback to capture the agent's response\n          const responseCallback = async (content: Content) => {\n            agentResponse = content.text;\n            if (content.actions && content.actions.length > 0) {\n              actionUsed = content.actions[0];\n            }\n            return [];\n          };\n\n          // Process the message - this simulates a real conversation\n          await runtime.processMessage(userMessage, [], responseCallback);\n\n          // Alternative approach if processMessage isn't available\n          if (!agentResponse) {\n            // Try using the evaluate method which processes messages through the full pipeline\n            const state: State = {\n              values: {},\n              data: {},\n              text: userMessage.content.text,\n            };\n\n            const result = await runtime.evaluate(userMessage, state, responseCallback);\n\n            // If evaluate doesn't work, try the action selection pipeline\n            if (!agentResponse && runtime.evaluateActions) {\n              const selectedActions = await runtime.evaluateActions(userMessage, state);\n\n              if (selectedActions && selectedActions.length > 0) {\n                // Execute the selected action\n                const action = runtime.actions.find((a: any) => a.name === selectedActions[0]);\n                if (action) {\n                  await action.handler(runtime, userMessage, state, {}, responseCallback, []);\n                }\n              }\n            }\n          }\n\n          // Step 3: Verify the agent understood and responded correctly\n          if (!agentResponse) {\n            throw new Error('Agent did not respond to natural language request');\n          }\n\n          // Check that the response contains \"hello world\" (case insensitive)\n          const responseText = (agentResponse || '') as string;\n          if (!responseText.toLowerCase().includes('hello world')) {\n            throw new Error(\n              `Agent response did not contain \"hello world\". Got: \"${agentResponse}\"`\n            );\n          }\n\n          // Optionally verify that the HELLO_WORLD action was used\n          if (actionUsed && actionUsed !== 'HELLO_WORLD') {\n            console.log(`Note: Agent used action \"${actionUsed}\" instead of \"HELLO_WORLD\"`);\n          }\n\n          // Test passed! The agent successfully understood the natural language request\n          // and responded with \"hello world\"\n        } catch (error) {\n          throw new Error(`Natural language hello world test failed: ${(error as Error).message}`);\n        }\n      },\n    },\n\n    {\n      /**\n       * Test 5: Provider Functionality\n       * Providers supply context to the agent. This test verifies that our\n       * HELLO_WORLD_PROVIDER is functioning and returning the expected data.\n       */\n      name: 'Hello world provider test',\n      fn: async (runtime: any) => {\n        const message: Memory = {\n          entityId: uuidv4() as UUID,\n          roomId: uuidv4() as UUID,\n          content: {\n            text: 'What can you provide?',\n            source: 'test',\n          },\n        };\n\n        const state: State = {\n          values: {},\n          data: {},\n          text: '',\n        };\n\n        // Test the hello world provider\n        try {\n          if (!runtime.providers || runtime.providers.length === 0) {\n            throw new Error('No providers found in runtime');\n          }\n\n          // Find the specific provider we want to test\n          const helloWorldProvider = runtime.providers.find(\n            (p: any) => p.name === 'HELLO_WORLD_PROVIDER'\n          );\n\n          if (!helloWorldProvider) {\n            throw new Error('HELLO_WORLD_PROVIDER not found in runtime providers');\n          }\n\n          const result = await helloWorldProvider.get(runtime, message, state);\n\n          if (result.text !== 'I am a provider') {\n            throw new Error(`Expected provider to return \"I am a provider\", got \"${result.text}\"`);\n          }\n        } catch (error) {\n          throw new Error(`Hello world provider test failed: ${(error as Error).message}`);\n        }\n      },\n    },\n\n    {\n      /**\n       * Test 6: Service Lifecycle Management\n       * Services are long-running components. This test verifies that our\n       * starter service can be properly started, accessed, and stopped.\n       */\n      name: 'Starter service test',\n      fn: async (runtime: any) => {\n        // Test service registration and lifecycle\n        try {\n          const service = runtime.getService('starter');\n          if (!service) {\n            throw new Error('Starter service not found');\n          }\n\n          if (\n            service.capabilityDescription !==\n            'This is a starter service which is attached to the agent through the starter plugin.'\n          ) {\n            throw new Error('Incorrect service capability description');\n          }\n\n          await service.stop();\n        } catch (error) {\n          throw new Error(`Starter service test failed: ${(error as Error).message}`);\n        }\n      },\n    },\n\n    /**\n     * TEMPLATE: How to add a new E2E test\n     * Copy this template and modify it for your specific test case\n     */\n    /*\n    {\n      name: 'My new feature test',\n      fn: async (runtime: any) => {\n        try {\n          // 1. Set up test data\n          const testData = {\n            // Your test setup here\n          };\n          \n          // 2. Execute the feature\n          const result = await runtime.someMethod(testData);\n          \n          // 3. Verify the results\n          if (!result) {\n            throw new Error('Expected result but got nothing');\n          }\n          \n          if (result.someProperty !== 'expected value') {\n            throw new Error(`Expected 'expected value' but got '${result.someProperty}'`);\n          }\n          \n          // Test passed if we reach here without throwing\n        } catch (error) {\n          // Always wrap errors with context for easier debugging\n          throw new Error(`My new feature test failed: ${error.message}`);\n        }\n      },\n    },\n    */\n  ];\n}\n\n// Export a default instance of the test suite for the E2E test runner\nexport default new StarterTestSuite();\n","import { type TestSuite } from '@elizaos/core';\n\n/**\n * Natural Language E2E Test Suite\n *\n * This suite tests the agent's ability to respond to natural language inputs,\n * including the requested \"hello world\" test.\n *\n * HOW TO ADD NEW NATURAL LANGUAGE TESTS:\n * 1. Add a new test object to the `tests` array\n * 2. Create a message with natural language content\n * 3. Process it through the runtime\n * 4. Verify the agent's response makes sense\n *\n * These tests use the REAL runtime with actual language processing,\n * so responses may vary based on the model and character configuration.\n */\nexport class NaturalLanguageTestSuite implements TestSuite {\n  name = 'natural-language';\n  description = 'E2E tests for natural language processing and agent responses';\n\n  tests = [\n    {\n      name: 'Agent responds to hello world',\n      fn: async (runtime: any) => {\n        /**\n         * This test verifies that the agent can respond appropriately\n         * to a simple \"hello world\" greeting.\n         */\n        try {\n          // Create a unique room for this test\n          const roomId = `test-room-hello-${Date.now()}`;\n          const userId = 'test-user-hello';\n\n          // Create a message saying \"hello world\"\n          const helloMessage = {\n            id: `msg-${Date.now()}`,\n            userId: userId,\n            agentId: runtime.agentId,\n            roomId: roomId,\n            content: {\n              text: 'hello world',\n              type: 'text',\n            },\n            createdAt: Date.now(),\n          };\n\n          console.log('Sending hello world message to agent...');\n\n          // Process the message through the runtime\n          // This will trigger the agent to generate a response\n          await runtime.processMessage(helloMessage);\n\n          // Give the agent a moment to process and respond\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n\n          // Retrieve messages from the conversation\n          const messages = await runtime.messageManager.getMessages({\n            roomId,\n            limit: 10,\n          });\n\n          console.log(`Retrieved ${messages.length} messages from conversation`);\n\n          // Verify we have at least 2 messages (user + agent)\n          if (messages.length < 2) {\n            throw new Error(`Expected at least 2 messages, got ${messages.length}`);\n          }\n\n          // Find the agent's response\n          const agentResponse = messages.find(\n            (m: any) =>\n              m.userId === runtime.agentId && m.roomId === roomId && m.id !== helloMessage.id\n          );\n\n          if (!agentResponse) {\n            throw new Error('Agent did not respond to hello world message');\n          }\n\n          console.log('Agent response:', agentResponse.content.text);\n\n          // Verify the response contains a greeting\n          const responseText = agentResponse.content.text.toLowerCase();\n          const greetingWords = ['hello', 'hi', 'hey', 'greetings', 'welcome'];\n\n          const containsGreeting = greetingWords.some((word) => responseText.includes(word));\n\n          if (!containsGreeting) {\n            throw new Error(\n              `Agent response did not contain a greeting. ` +\n                `Response was: \"${agentResponse.content.text}\"`\n            );\n          }\n\n          console.log('✓ Agent successfully responded to hello world');\n        } catch (error) {\n          throw new Error(`Hello world test failed: ${(error as Error).message}`);\n        }\n      },\n    },\n\n    {\n      name: 'Agent responds to casual greeting',\n      fn: async (runtime: any) => {\n        /**\n         * Test various casual greetings to ensure the agent\n         * responds appropriately to different forms of hello.\n         */\n        try {\n          const greetings = ['hey there!', 'hi, how are you?', 'good morning!', 'whats up?'];\n\n          for (const greeting of greetings) {\n            const roomId = `test-room-greeting-${Date.now()}-${Math.random()}`;\n            const userId = 'test-user-greeting';\n\n            const message = {\n              id: `msg-${Date.now()}-${Math.random()}`,\n              userId: userId,\n              agentId: runtime.agentId,\n              roomId: roomId,\n              content: {\n                text: greeting,\n                type: 'text',\n              },\n              createdAt: Date.now(),\n            };\n\n            console.log(`Testing greeting: \"${greeting}\"`);\n\n            await runtime.processMessage(message);\n            await new Promise((resolve) => setTimeout(resolve, 500));\n\n            const messages = await runtime.messageManager.getMessages({\n              roomId,\n              limit: 10,\n            });\n\n            const agentResponse = messages.find(\n              (m: any) => m.userId === runtime.agentId && m.id !== message.id\n            );\n\n            if (!agentResponse) {\n              throw new Error(`Agent did not respond to greeting: \"${greeting}\"`);\n            }\n\n            // Just verify we got a response - content may vary\n            if (!agentResponse.content.text || agentResponse.content.text.length < 2) {\n              throw new Error(`Agent gave empty response to: \"${greeting}\"`);\n            }\n\n            console.log(`✓ Agent responded to: \"${greeting}\"`);\n          }\n        } catch (error) {\n          throw new Error(`Casual greeting test failed: ${(error as Error).message}`);\n        }\n      },\n    },\n\n    {\n      name: 'Agent maintains conversation context',\n      fn: async (runtime: any) => {\n        /**\n         * Test that the agent remembers context from previous messages\n         * in the same conversation.\n         */\n        try {\n          const roomId = `test-room-context-${Date.now()}`;\n          const userId = 'test-user-context';\n\n          // First message - introduce a topic\n          const firstMessage = {\n            id: `msg-1-${Date.now()}`,\n            userId: userId,\n            agentId: runtime.agentId,\n            roomId: roomId,\n            content: {\n              text: \"My favorite color is blue. What's yours?\",\n              type: 'text',\n            },\n            createdAt: Date.now(),\n          };\n\n          console.log('Sending first message about favorite color...');\n          await runtime.processMessage(firstMessage);\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n\n          // Second message - reference the topic\n          const secondMessage = {\n            id: `msg-2-${Date.now()}`,\n            userId: userId,\n            agentId: runtime.agentId,\n            roomId: roomId,\n            content: {\n              text: 'Why did you choose that color?',\n              type: 'text',\n            },\n            createdAt: Date.now() + 1000,\n          };\n\n          console.log('Sending follow-up question...');\n          await runtime.processMessage(secondMessage);\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n\n          // Get all messages\n          const messages = await runtime.messageManager.getMessages({\n            roomId,\n            limit: 10,\n          });\n\n          // Should have at least 4 messages (2 user + 2 agent)\n          if (messages.length < 4) {\n            throw new Error(`Expected at least 4 messages, got ${messages.length}`);\n          }\n\n          // Find the agent's second response\n          const agentResponses = messages.filter((m: any) => m.userId === runtime.agentId);\n          if (agentResponses.length < 2) {\n            throw new Error('Agent did not respond to both messages');\n          }\n\n          // The second response should reference colors or the previous conversation\n          const secondResponse = agentResponses[agentResponses.length - 1];\n          const responseText = secondResponse.content.text.toLowerCase();\n\n          // Check if the response shows context awareness\n          const contextWords = ['color', 'blue', 'favorite', 'chose', 'choice', 'because'];\n          const hasContext = contextWords.some((word) => responseText.includes(word));\n\n          if (!hasContext) {\n            console.warn(\n              'Agent response may not show context awareness. ' +\n                `Response: \"${secondResponse.content.text}\"`\n            );\n          }\n\n          console.log('✓ Agent maintained conversation context');\n        } catch (error) {\n          throw new Error(`Context test failed: ${(error as Error).message}`);\n        }\n      },\n    },\n  ];\n}\n\n// Export a default instance for the test runner\nexport default new NaturalLanguageTestSuite();\n","/**\n * E2E Test Suite Exports\n *\n * This file exports all E2E test suites for the ElizaOS test runner.\n */\n\nimport projectTestSuite from './project.test';\nimport starterTestSuite from './starter-plugin.test';\nimport naturalLanguageTestSuite from './natural-language.test';\n\n// Export test suites for the test runner to discover\nexport const testSuites = [projectTestSuite, starterTestSuite, naturalLanguageTestSuite];\n\nexport default testSuites;\n"],"mappings":"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","names":["character","character"]}