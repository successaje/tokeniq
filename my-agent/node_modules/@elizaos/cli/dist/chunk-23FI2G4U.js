
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

import {
  createAgent,
  createPlugin,
  createProject,
  createTEEProject,
  selectAIModel,
  selectDatabase,
  selectEmbeddingModel,
  validateCreateOptions,
  validateProjectName
} from "./chunk-E2PKE6N5.js";
import {
  displayBanner,
  handleError
} from "./chunk-IYFVOAOM.js";

// src/commands/create/index.ts
import { Command } from "commander";
import * as clack from "@clack/prompts";
import colors from "yoctocolors";
import { logger } from "@elizaos/core";
var create = new Command("create").description("Create a new ElizaOS project, plugin, agent, or TEE project").argument("[name]", "name of the project/plugin/agent to create").option("--dir <dir>", "directory to create the project in", ".").option("--yes, -y", "skip prompts and use defaults").option("--type <type>", "type of project to create (project, plugin, agent, tee)", "project").action(async (name, opts) => {
  try {
    if (process.env.ELIZA_NONINTERACTIVE === "1" || process.env.ELIZA_NONINTERACTIVE === "true" || process.argv.includes("-y") || process.argv.includes("--yes")) {
      if (opts) {
        opts.yes = true;
      } else {
        opts = { yes: true };
      }
    }
    const options = validateCreateOptions(opts || {});
    const isNonInteractive = options.yes;
    if (!isNonInteractive) {
      await displayBanner();
      clack.intro(colors.inverse(" Creating ElizaOS Project "));
    }
    let projectType = options.type;
    let projectName = name;
    if (!projectName) {
      if (!isNonInteractive) {
        const selectedType = await clack.select({
          message: "What would you like to create?",
          options: [
            {
              label: "Project - Full ElizaOS application",
              value: "project",
              hint: "Complete project with runtime, agents, and all features"
            },
            {
              label: "Plugin - Custom ElizaOS plugin",
              value: "plugin",
              hint: "Extend ElizaOS functionality with custom plugins"
            },
            {
              label: "Agent - Character definition file",
              value: "agent",
              hint: "Create a new agent character file"
            },
            {
              label: "TEE Project - Trusted Execution Environment project",
              value: "tee",
              hint: "Secure computing environment for privacy-focused applications"
            }
          ],
          initialValue: "project"
        });
        if (clack.isCancel(selectedType)) {
          clack.cancel("Operation cancelled.");
          process.exit(0);
        }
        projectType = selectedType;
      }
      if (!isNonInteractive) {
        const nameInput = await clack.text({
          message: `What is the name of your ${projectType}?`,
          placeholder: `my-${projectType}`,
          validate: (value) => {
            if (!value) return "Name is required";
            if (projectType === "agent") {
              return value.length > 0 ? void 0 : "Agent name cannot be empty";
            }
            const validation = validateProjectName(value);
            return validation.isValid ? void 0 : validation.error;
          }
        });
        if (clack.isCancel(nameInput)) {
          clack.cancel("Operation cancelled.");
          process.exit(0);
        }
        projectName = nameInput;
      } else {
        throw new Error(`Project name is required. Usage: elizaos create [name]`);
      }
    }
    if (projectType !== "agent") {
      const nameValidation = validateProjectName(projectName);
      if (!nameValidation.isValid) {
        throw new Error(nameValidation.error);
      }
    }
    const targetDir = options.dir;
    switch (projectType) {
      case "plugin":
        await createPlugin(projectName, targetDir, isNonInteractive);
        break;
      case "agent":
        await createAgent(projectName, targetDir, isNonInteractive);
        break;
      case "tee": {
        let database = "pglite";
        let aiModel = "local";
        let embeddingModel;
        if (!isNonInteractive) {
          database = await selectDatabase();
          aiModel = await selectAIModel();
          if (aiModel === "claude" || aiModel === "openrouter") {
            embeddingModel = await selectEmbeddingModel();
          }
        }
        await createTEEProject(
          projectName,
          targetDir,
          database,
          aiModel,
          embeddingModel,
          isNonInteractive
        );
        break;
      }
      case "project":
      default: {
        let database = "pglite";
        let aiModel = "local";
        let embeddingModel;
        if (!isNonInteractive) {
          database = await selectDatabase();
          aiModel = await selectAIModel();
          if (aiModel === "claude" || aiModel === "openrouter") {
            embeddingModel = await selectEmbeddingModel();
          }
        }
        await createProject(
          projectName,
          targetDir,
          database,
          aiModel,
          embeddingModel,
          isNonInteractive
        );
        break;
      }
    }
    if (!isNonInteractive) {
      clack.outro(colors.green("Project created successfully! \u{1F389}"));
    }
  } catch (error) {
    if (!opts?.yes) {
      clack.cancel("Failed to create project.");
    }
    logger.error("Create command failed:", error);
    handleError(error);
    process.exit(1);
  }
});

export {
  create
};
