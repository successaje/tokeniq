
import { createRequire } from 'module';
const require = createRequire(import.meta.url);


// src/utils/emoji-handler.ts
import { logger } from "@elizaos/core";
var config = {
  enabled: true,
  forceDisable: false
};
var EMOJIS = {
  // Status indicators
  success: { emoji: "\u2705", fallback: "[OK]" },
  error: { emoji: "\u274C", fallback: "[ERROR]" },
  warning: { emoji: "\u26A0\uFE0F", fallback: "[WARNING]" },
  info: { emoji: "\u2139\uFE0F", fallback: "[INFO]" },
  // Actions
  rocket: { emoji: "\u{1F680}", fallback: ">>" },
  sparkles: { emoji: "\u2728", fallback: "*" },
  party: { emoji: "\u{1F389}", fallback: "[DONE]" },
  // Objects/Tools
  package: { emoji: "\u{1F4E6}", fallback: "[PKG]" },
  link: { emoji: "\u{1F517}", fallback: "[LINK]" },
  lightbulb: { emoji: "\u{1F4A1}", fallback: "[TIP]" },
  clipboard: { emoji: "\u{1F4CB}", fallback: "[LIST]" },
  // Platforms
  penguin: { emoji: "\u{1F427}", fallback: "[LINUX]" },
  globe: { emoji: "\u{1F310}", fallback: "[WEB]" },
  // Arrows and pointers
  rightArrow: { emoji: "\u2192", fallback: "->" },
  bullet: { emoji: "\u2022", fallback: "*" }
};
function detectEmojiSupport() {
  if (config.forceDisable) {
    return false;
  }
  const term = process.env.TERM || "";
  const termProgram = process.env.TERM_PROGRAM || "";
  const colorTerm = process.env.COLORTERM;
  const ciEnv = process.env.CI;
  if (ciEnv === "true" || process.env.GITHUB_ACTIONS) {
    return false;
  }
  if (process.platform === "win32") {
    if (termProgram === "vscode" || process.env.WT_SESSION || process.env.WT_PROFILE_ID || termProgram === "Windows Terminal") {
      return true;
    }
    if (process.env.PSModulePath && process.env.POWERSHELL_TELEMETRY_OPTOUT !== void 0) {
      return true;
    }
    return false;
  }
  if (process.platform === "darwin" || process.platform === "linux") {
    if (termProgram === "vscode" || termProgram === "iTerm.app" || termProgram === "Apple_Terminal" || term.includes("xterm") || term.includes("screen") || colorTerm) {
      return true;
    }
  }
  if (term.includes("256color") || term.includes("truecolor")) {
    return true;
  }
  return false;
}
function getEmoji(key) {
  const emojiDef = EMOJIS[key];
  if (!emojiDef) {
    logger.warn(`Unknown emoji key: ${key}`);
    return "";
  }
  return config.enabled && detectEmojiSupport() ? emojiDef.emoji : emojiDef.fallback;
}
function configureEmojis(newConfig) {
  config = { ...config, ...newConfig };
}
function withEmoji(key, message, spacing = true) {
  const emoji2 = getEmoji(key);
  const space = spacing && emoji2 ? " " : "";
  return `${emoji2}${space}${message}`;
}
var emoji = {
  success: (msg) => withEmoji("success", msg),
  error: (msg) => withEmoji("error", msg),
  warning: (msg) => withEmoji("warning", msg),
  info: (msg) => withEmoji("info", msg),
  rocket: (msg) => withEmoji("rocket", msg),
  package: (msg) => withEmoji("package", msg),
  link: (msg) => withEmoji("link", msg),
  tip: (msg) => withEmoji("lightbulb", msg),
  list: (msg) => withEmoji("clipboard", msg),
  penguin: (msg) => withEmoji("penguin", msg),
  bullet: (msg) => withEmoji("bullet", msg)
};
function initializeEmojiSupport() {
  const supported = detectEmojiSupport();
  if (process.env.DEBUG || process.env.ELIZA_DEBUG) {
    logger.debug(
      `Emoji support: ${supported ? "enabled" : "disabled"} (platform: ${process.platform}, term: ${process.env.TERM || "unknown"})`
    );
  }
}
initializeEmojiSupport();

export {
  configureEmojis,
  emoji
};
