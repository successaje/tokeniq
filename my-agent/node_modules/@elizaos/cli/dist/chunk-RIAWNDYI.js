
import { createRequire } from 'module';
const require = createRequire(import.meta.url);


// src/utils/run-bun.ts
import { execa } from "execa";

// src/utils/bun-installation-helper.ts
import { logger } from "@elizaos/core";
function displayBunInstallationTipCompact() {
  const platform = process.platform;
  if (platform === "win32") {
    return 'Install bun: powershell -c "irm bun.sh/install.ps1 | iex" (see https://bun.sh/docs/installation)';
  } else {
    return "Install bun: curl -fsSL https://bun.sh/install | bash (see https://bun.sh/docs/installation)";
  }
}

// src/utils/run-bun.ts
async function runBunCommand(args, cwd) {
  const finalArgs = [...args];
  const isInstallCommand = args[0] === "install";
  const isCI = process.env.CI || process.env.ELIZA_TEST_MODE === "true";
  if (isCI && isInstallCommand) {
    if (!finalArgs.includes("--frozen-lockfile")) {
      finalArgs.push("--frozen-lockfile");
    }
    console.info("\u2705 Using CI-optimized flags for faster installation...");
  }
  try {
    await execa("bun", finalArgs, { cwd, stdio: "inherit" });
  } catch (error) {
    if (error.code === "ENOENT" || error.message?.includes("bun: command not found")) {
      throw new Error(`Bun command not found. ${displayBunInstallationTipCompact()}`);
    }
    if (isCI && isInstallCommand && (error.message?.includes("frozen-lockfile") || error.message?.includes("install"))) {
      console.warn("CI-optimized install failed, retrying with basic args...");
      await execa("bun", args, { cwd, stdio: "inherit" });
    } else {
      throw error;
    }
  }
}

export {
  displayBunInstallationTipCompact,
  runBunCommand
};
