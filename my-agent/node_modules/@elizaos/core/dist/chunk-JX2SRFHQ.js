import {
  toV2State
} from "./chunk-YIBXLDIR.js";

// src/specs/v1/provider.ts
function fromV2Provider(providerV2) {
  return {
    name: providerV2.name,
    description: providerV2.description,
    dynamic: providerV2.dynamic,
    position: providerV2.position,
    private: providerV2.private,
    get: async (runtime, message, state) => {
      const stateV2 = state ? toV2State(state) : void 0;
      try {
        const result = await providerV2.get(runtime, message, stateV2);
        return result.text || "";
      } catch (error) {
        console.error(`Error in v2 provider ${providerV2.name}:`, error);
        throw error;
      }
    }
  };
}
function toV2Provider(provider) {
  return {
    name: provider.name || "unnamed-provider",
    description: provider.description,
    dynamic: provider.dynamic,
    position: provider.position,
    private: provider.private,
    get: async (runtime, message, state) => {
      try {
        const result = await provider.get(runtime, message, state);
        if (typeof result === "object" && result !== null) {
          return {
            ...result,
            values: result.values || {},
            data: result.data || {},
            text: result.text || ""
          };
        }
        return {
          values: {},
          data: {},
          text: String(result || "")
        };
      } catch (error) {
        console.error(`Error in v1 provider ${provider.name || "unnamed"}:`, error);
        throw error;
      }
    }
  };
}

export {
  fromV2Provider,
  toV2Provider
};
