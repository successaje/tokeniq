import { ActionExample as ActionExample$2, Content as Content$1 } from './types.js';
import { w as ActionExample$1, t as Content } from '../../types-BhMd7Ajo.js';
import 'stream';

/**
 * Example content with associated user for demonstration purposes
 * This is exported from types.ts in v1, but we're recreating it here for the adapter
 */
type ActionExample = ActionExample$2;
/**
 * Safely converts a V2 content object to a V1 Content type
 * Maps known properties and preserves additional ones
 *
 * @param content V2 content object
 * @returns Content compatible with V1
 */
declare function convertContentToV1(content: Content): Content$1;
/**
 * Safely converts a V1 Content object to a V2 compatible content type
 * Maps known properties and preserves additional ones
 *
 * @param content V1 Content object
 * @returns Content compatible with V2
 */
declare function convertContentToV2(content: Content$1): Content;
/**
 * Converts v2 ActionExample to v1 compatible ActionExample
 *
 * @param exampleV2 The V2 action example to convert
 * @returns V1 compatible ActionExample
 */
declare function fromV2ActionExample(exampleV2: ActionExample$1): ActionExample;
/**
 * Converts v1 ActionExample to v2 ActionExample
 *
 * @param example The V1 action example to convert
 * @returns V2 compatible ActionExample
 */
declare function toV2ActionExample(example: ActionExample): ActionExample$1;

export { type ActionExample, convertContentToV1, convertContentToV2, fromV2ActionExample, toV2ActionExample };
