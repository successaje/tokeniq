import { State } from './state.js';
import '../../types-BhMd7Ajo.js';
import './types.js';
import 'stream';

/**
 * Template type definition for v1 compatibility
 * A template can be either a string or a function that takes state and returns a string
 * This aligns with V2's TemplateType
 */
type TemplateType = string | ((options: {
    state: State;
}) => string);
/**
 * Generic template values interface for typed access to state.values
 * Users can extend this interface for type safety in their templates
 */
interface TemplateValues {
    [key: string]: unknown;
}
/**
 * Create a template function from a v1 template
 * @param template The v1 template (string or function)
 * @returns A function that processes the template with the given state
 */
declare function createTemplateFunction(template: TemplateType): (state: State) => string;
/**
 * Process a template with the given state
 * @param template The template to process (string or function)
 * @param state The state to use for processing
 * @returns The processed template string
 */
declare function processTemplate(template: TemplateType, state: State): string;
/**
 * Type-safe accessor for template values
 * @param state The state containing the values
 * @param defaultValues Optional default values to use if values are missing
 * @returns The values object with type information
 */
declare function getTemplateValues<T extends TemplateValues>(state: State, defaultValues?: Partial<T>): T;

export { type TemplateType, type TemplateValues, createTemplateFunction, getTemplateValues, processTemplate };
